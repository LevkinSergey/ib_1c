
&НаКлиенте
Процедура КаталогФайловИмпортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	диалогВыбораКаталога = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	диалогВыбораКаталога.МножественныйВыбор = ложь;
	диалогВыбораКаталога.Показать(новый ОписаниеОповещения("ВыбранКаталогИмпорта", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранКаталогИмпорта(ВыбранныеФайлы, ДополнительныеПараметры) экспорт
	
	если ВыбранныеФайлы = неопределено тогда
		возврат;
	конецЕсли;	
	
	если ВыбранныеФайлы.Количество() = 0 тогда
		возврат;
	конецЕсли;	
	
	объект.КаталогФайловИмпорта = ВыбранныеФайлы[0];
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрочитатьФайлы(Команда)
	
	если ПустаяСтрока(объект.КаталогФайловИмпорта) тогда 
		возврат;
	конецЕсли;	
	
	мФайлов = НайтиФайлы(объект.КаталогФайловИмпорта, "*_*_*_*_*_*.json", ложь);
	
	мИменОбрабатываемыхКолонок = новый массив;
	мИменОбрабатываемыхКолонок.Добавить("date");
	мИменОбрабатываемыхКолонок.Добавить("datefrom");
	мИменОбрабатываемыхКолонок.Добавить("dateto");
	мИменОбрабатываемыхКолонок.Добавить("appname");
	
	для каждого файлИмпорта из мФайлов цикл
		чтение_JSON = новый ЧтениеJSON();
		чтение_JSON.ОткрытьФайл(файлИмпорта.ПолноеИмя, "utf8");
		
		необработанныеДанные = ПрочитатьJSON(чтение_JSON,,,, "ПривестиЗначенияJSON", ЭтаФорма,, мИменОбрабатываемыхКолонок);
		чтение_JSON.Закрыть();
		
		для каждого элементДанных из необработанныеДанные цикл
			строкаТаблицы = объект.ТаблицаИмпорта.Добавить();
			строкаТаблицы.дата = элементДанных.date;
			строкаТаблицы.началоСеанса = элементДанных.datefrom;
			строкаТаблицы.конецСеанса = элементДанных.dateto;
			строкаТаблицы.имяПользователя = элементДанных.username;
			строкаТаблицы.приложение1С = элементДанных.appname;
			строкаТаблицы.номерСессии = элементДанных.session;
			строкаТаблицы.серверОбозначение = элементДанных.server;
			строкаТаблицы.серверныйИдентификаторПартнера = элементДанных.partner;
			строкаТаблицы.ИнформационнаяБазаОбозначение = элементДанных.config;
		конецЦикла;
		
	КонецЦикла;	
	
	СопоставитьЗагружаемыеДанные();
	
КонецПроцедуры

&НаКлиенте
Функция ПривестиЗначенияJSON(свойство, значение, дополнительныеПараметры) экспорт
	
	если свойство = "date" или свойство = "datefrom" или свойство = "dateto" тогда
		
		мЧастейДаты = СтрРазделить(значение, " ", ложь);
				
		если мЧастейДаты.Количество() = 2 тогда
			мЧастейВремени = СтрРазделить(мЧастейДаты[1], ":", ложь);
			час = мЧастейВремени[0];
			минута = мЧастейВремени[1];
		иначе
			час = "00";
			минута = "00";
		конецЕсли;	
		
		мЧастейДаты = СтрРазделить(мЧастейДаты[0], "-", ложь);
		год = мЧастейДаты[0];
		месяц = мЧастейДаты[1];
		день = мЧастейДаты[2];
		
		попытка
			возврат дата(число(год), число(месяц), число(день), число(час), число(минута), 0);
		исключение
			возврат неопределено;
		КонецПопытки;	
		
	иначеЕсли свойство = "appname" тогда
		
		имяПриложения = СтрЗаменить(нрег(значение), """", "");
		
		если имяПриложения = "1cv8c" тогда
			возврат ПредопределенноеЗначение("Перечисление.Приложения1С.ТонкийКлиент");
		иначеЕсли имяПриложения = "designer" тогда
			возврат ПредопределенноеЗначение("Перечисление.Приложения1С.Конфигуратор");
		иначеЕсли имяПриложения = "1cv8c" тогда
			возврат ПредопределенноеЗначение("Перечисление.Приложения1С.ТолстыйКлиент");
		иначеЕсли имяПриложения = "backgroundjob" тогда
			возврат ПредопределенноеЗначение("Перечисление.Приложения1С.ФоновоеЗадание");
		иначеЕсли имяПриложения = "webclient" тогда
			возврат ПредопределенноеЗначение("Перечисление.Приложения1С.WEBКлиент");
		иначеЕсли имяПриложения = "mobileclient" тогда
			возврат ПредопределенноеЗначение("Перечисление.Приложения1С.МобильныйКлиент");
		конецЕсли;	
		                                                                               
	конецЕсли;	
	
	возврат значение;
	
КонецФункции	

&НаСервере
Процедура СопоставитьЗагружаемыеДанные()
	
	запрос = новый запрос;
	запрос.текст = "ВЫБРАТЬ
	               |	табСопоставления.СерверныйИдентификаторПартнера + табСопоставления.ИнформационнаяБазаОбозначение КАК СерверныйИдентификаторИнформациннойБазы,
	               |	табСопоставления.НомерСессии КАК НомерСессии,
	               |	табСопоставления.Дата КАК Дата,
	               |	табСопоставления.ИмяПользователя КАК ИмяПользователя,
	               |	табСопоставления.Приложение1С КАК Приложение1С,
	               |	табСопоставления.НачалоСеанса КАК НачалоСеанса,
	               |	табСопоставления.КонецСеанса КАК КонецСеанса,
	               |	табСопоставления.СерверныйИдентификаторПартнера КАК СерверныйИдентификаторПартнера,
	               |	табСопоставления.ИнформационнаяБазаОбозначение КАК ИнформационнаяБазаОбозначение,
	               |	табСопоставления.СерверОбозначение КАК СерверОбозначение
	               |ПОМЕСТИТЬ втТаблицаСопоставления
	               |ИЗ
	               |	&табСопоставления КАК табСопоставления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втТаблицаСопоставления.НомерСессии КАК НомерСессии,
	               |	втТаблицаСопоставления.Дата КАК Дата,
	               |	втТаблицаСопоставления.ИмяПользователя КАК ИмяПользователя,
	               |	втТаблицаСопоставления.Приложение1С КАК Приложение1С,
	               |	втТаблицаСопоставления.НачалоСеанса КАК НачалоСеанса,
	               |	втТаблицаСопоставления.КонецСеанса КАК КонецСеанса,
	               |	втТаблицаСопоставления.СерверныйИдентификаторПартнера КАК СерверныйИдентификаторПартнера,
	               |	втТаблицаСопоставления.ИнформационнаяБазаОбозначение КАК ИнформационнаяБазаОбозначение,
	               |	МАКСИМУМ(Серверы.Ссылка) КАК Сервер,
	               |	МАКСИМУМ(ИнформационныеБазы.Ссылка) КАК ИнформационнаяБаза
	               |ИЗ
	               |	втТаблицаСопоставления КАК втТаблицаСопоставления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Серверы КАК Серверы
	               |		ПО втТаблицаСопоставления.СерверОбозначение = Серверы.СерверныйИдентификатор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	               |		ПО втТаблицаСопоставления.СерверныйИдентификаторИнформациннойБазы = ИнформационныеБазы.СерверныйИдентификатор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втТаблицаСопоставления.НомерСессии,
	               |	втТаблицаСопоставления.Дата,
	               |	втТаблицаСопоставления.ИмяПользователя,
	               |	втТаблицаСопоставления.Приложение1С,
	               |	втТаблицаСопоставления.НачалоСеанса,
	               |	втТаблицаСопоставления.КонецСеанса,
	               |	втТаблицаСопоставления.СерверныйИдентификаторПартнера,
	               |	втТаблицаСопоставления.ИнформационнаяБазаОбозначение";
	запрос.УстановитьПараметр("табСопоставления", объект.ТаблицаИмпорта.Выгрузить());
	объект.ТаблицаИмпорта.Загрузить(запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

&НаКлиенте
Процедура Импортировать(Команда)
	ИмпортироватьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИмпортироватьНаСервере()
	
	ошибки = неопределено;
	
	обработкаОб = РеквизитФормыВЗначение("Объект");
	таблицаИмпортаЗаполнена = обработкаОб.ТаблицаИмпортаЗаполнена(ошибки);
	
	если таблицаИмпортаЗаполнена тогда
		обработкаОб.Импортировать();
	иначе
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ошибки);
	конецЕсли;	
	
	
КонецПроцедуры

